{"ast":null,"code":"import React,{useState}from\"react\";import axios from\"axios\";// Import axios for making API calls\nimport{base_url}from\"../constant\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ResetPassword(){const[newPassword,setNewPassword]=useState(\"\");const[confirmNewPassword,setConfirmNewPassword]=useState(\"\");const[errorMessage,setErrorMessage]=useState(\"\");const[successMessage,setSuccessMessage]=useState(\"\");const[showForm,setShowForm]=useState(true);const handleResetPassword=async()=>{if(newPassword!==confirmNewPassword){setErrorMessage(\"Passwords do not match.\");return;}try{const token=window.location.search.substring(1);console.log(token);// Make API call to reset password\nconst response=await axios.post(\"\".concat(base_url,\"/api/users/reset/password\"),{newPassword:newPassword,token});if(response.status===200){setSuccessMessage(\"Password reset successfully.\");setShowForm(false);}else{setErrorMessage(\"Failed to reset password. Please try again.\");}}catch(error){setErrorMessage(\"An error occurred while resetting password.\");}};const handleLogin=()=>{// Redirect to login page or handle login logic\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Reset Password\"}),showForm&&/*#__PURE__*/_jsxs(\"div\",{children:[errorMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:errorMessage}),successMessage&&/*#__PURE__*/_jsx(\"div\",{className:\"success-message\",children:successMessage}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"New Password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:newPassword,onChange:e=>setNewPassword(e.target.value)})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Confirm New Password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",value:confirmNewPassword,onChange:e=>setConfirmNewPassword(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleResetPassword,children:\"Reset Password\"})]}),!showForm&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Password reset successfully. Please login with your new password.\"}),/*#__PURE__*/_jsx(\"a\",{href:\"/login\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleLogin,children:\"Login\"})})]})]});}","map":{"version":3,"names":["React","useState","axios","base_url","jsx","_jsx","jsxs","_jsxs","ResetPassword","newPassword","setNewPassword","confirmNewPassword","setConfirmNewPassword","errorMessage","setErrorMessage","successMessage","setSuccessMessage","showForm","setShowForm","handleResetPassword","token","window","location","search","substring","console","log","response","post","concat","status","error","handleLogin","children","className","type","value","onChange","e","target","onClick","href"],"sources":["C:/Users/coder/Desktop/Saideep/To Prashant/client/src/screens/ResetPasswordScreen.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\"; // Import axios for making API calls\r\nimport { base_url } from \"../constant\";\r\n\r\nexport default function ResetPassword() {\r\n  const [newPassword, setNewPassword] = useState(\"\");\r\n  const [confirmNewPassword, setConfirmNewPassword] = useState(\"\");\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n  const [showForm, setShowForm] = useState(true);\r\n\r\n  const handleResetPassword = async () => {\r\n    if (newPassword !== confirmNewPassword) {\r\n      setErrorMessage(\"Passwords do not match.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const token = window.location.search.substring(1);\r\n      console.log(token);\r\n      // Make API call to reset password\r\n      const response = await axios.post(`${base_url}/api/users/reset/password`, {\r\n        newPassword: newPassword,\r\n        token,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        setSuccessMessage(\"Password reset successfully.\");\r\n        setShowForm(false);\r\n      } else {\r\n        setErrorMessage(\"Failed to reset password. Please try again.\");\r\n      }\r\n    } catch (error) {\r\n      setErrorMessage(\"An error occurred while resetting password.\");\r\n    }\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    // Redirect to login page or handle login logic\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Reset Password</h2>\r\n      {showForm && (\r\n        <div>\r\n          {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n          {successMessage && (\r\n            <div className=\"success-message\">{successMessage}</div>\r\n          )}\r\n          <div>\r\n            <label>New Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              value={newPassword}\r\n              onChange={(e) => setNewPassword(e.target.value)}\r\n            />\r\n          </div>\r\n          <div>\r\n            <label>Confirm New Password:</label>\r\n            <input\r\n              type=\"password\"\r\n              value={confirmNewPassword}\r\n              onChange={(e) => setConfirmNewPassword(e.target.value)}\r\n            />\r\n          </div>\r\n          <button onClick={handleResetPassword}>Reset Password</button>\r\n        </div>\r\n      )}\r\n      {!showForm && (\r\n        <div>\r\n          <p>Password reset successfully. Please login with your new password.</p>\r\n          <a href=\"/login\"><button onClick={handleLogin}>Login</button></a>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}